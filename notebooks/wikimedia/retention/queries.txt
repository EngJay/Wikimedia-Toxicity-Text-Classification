SET mapreduce.job.queuename=priority;

-- daily revision info for all registered users

DROP TABLE IF EXISTS enwiki.daily_revision_counts;
CREATE TABLE enwiki.daily_revision_counts
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
AS SELECT
  user_id,
  day,
  ns, 
  COUNT(*) AS n_revisions,
  SUM(revision_is_deleted) AS n_deleted_revisions,
  SUM(revision_is_identity_reverted) AS n_identity_reverted_revisions,
  SUM(revision_is_productive) AS n_productive_revisions
FROM (
  SELECT
    event_user_id AS user_id,
    event_user_text AS user_text,
    SUBSTRING(event_timestamp, 1, 8) AS day,
    page_namespace AS ns,
    CAST(revision_is_deleted AS INT) AS revision_is_deleted,
    CAST(revision_is_identity_reverted AS INT) AS revision_is_identity_reverted,
    CAST(revision_is_productive AS INT) AS revision_is_productive
  FROM
    wmf.mediawiki_history
  WHERE
    wiki_db = "enwiki"
    AND event_entity = "revision"
    AND event_user_id != 0
) a
GROUP BY
  user_id,
  day,
  ns;


-- user_id_to_names


DROP TABLE IF EXISTS enwiki.user_id_to_names;
CREATE TABLE enwiki.user_id_to_names
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
AS SELECT
  event_user_id AS user_id,
  event_user_text AS user_text
FROM
  wmf.mediawiki_history
WHERE
  wiki_db = "enwiki"
  AND event_entity = "revision"
  AND event_user_id != 0
GROUP BY
  event_user_id,
  event_user_text;




-- first edit dates for users who made at least one edit in any namespace

DROP TABLE IF EXISTS enwiki.user_first_edit;
CREATE TABLE enwiki.user_first_edit
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n'
STORED AS TEXTFILE
AS SELECT
    user_id,
    day as first_edit_day
FROM
  (SELECT
    e.*,
    RANK() OVER  (PARTITION BY user_id ORDER BY day ASC) AS rank 
  FROM
    enwiki.daily_revision_counts e
  ) a
WHERE
  rank == 1
GROUP BY
  user_id,
  day
;

